{"version":3,"file":"AppLoading.js","sourceRoot":"","sources":["../src/AppLoading.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AACzC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,gBAAgB,MAAM,2BAA2B,CAAC;AAwCzD,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,KAAK,CAAC,SAAgB;IAA9D;;QACE,eAAU,GAAY,KAAK,CAAC;IAgD9B,CAAC;IA9CC,iBAAiB;QACf,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAE/B,IAAI,CAAC,6BAA6B,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACjD,OAAO,CAAC,KAAK,CAAC,uDAAuD,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,SAAS,CAAC,sBAAsB,CAAC,CAAC;IACpC,CAAC;IAEO,KAAK,CAAC,6BAA6B;QACzC,IAAI,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YACjC,OAAO;SACR;QAED,IAAI,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACnF;QAED,IAAI,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;QAED,IAAI;YACF,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;SAC/B;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACpB,OAAO;aACR;YACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACvB;gBAAS;YACR,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACpB,OAAO;aACR;YACD,iGAAiG;YACjG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SACvB;IACH,CAAC;IAED,MAAM;QACJ,OAAO,oBAAC,gBAAgB,oBAAK,IAAI,CAAC,KAAK,EAAI,CAAC;IAC9C,CAAC;CACF;AAED,IAAI,gBAAgB,GAAwB,IAAI,CAAC;AAEjD,SAAS,SAAS,CAAC,KAAa;IAC9B,IAAI,gBAAgB,EAAE;QACpB,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;AACH,CAAC;AAED,MAAM,UAAU,6BAA6B;IAC3C,IAAI,CAAC,gBAAgB,EAAE;QACrB,gBAAgB,GAAG,IAAI,YAAY,EAAE,CAAC;KACvC;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["import { EventEmitter } from 'fbemitter';\nimport React from 'react';\n\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      /**\n       * Optional, you can do this process manually if you prefer.\n       * This is mainly for backwards compatibility and it is not recommended.\n       *\n       * When provided, requires providing `onError` prop as well.\n       * @deprecated\n       */\n      startAsync: () => Promise<void>;\n\n      /**\n       * If `startAsync` throws an error, it is caught and passed into the provided function.\n       * @deprecated\n       */\n      onError: (error: Error) => void;\n\n      /**\n       * Called when `startAsync` resolves or rejects.\n       * This should be used to set state and unmount the `AppLoading` component.\n       * @deprecated\n       */\n      onFinish: () => void;\n\n      /**\n       * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n       * Auto-hiding is enabled by default.\n       */\n      autoHideSplash?: boolean;\n    }\n  | {\n      /**\n       * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n       * Auto-hiding is enabled by default.\n       */\n      autoHideSplash?: boolean;\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n    emitEvent('componentDidMount');\n\n    this.startLoadingAppResourcesAsync().catch(error => {\n      console.error(`AppLoading threw an unexpected error when loading:\\n${error.stack}`);\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    emitEvent('componentWillUnmount');\n  }\n\n  private async startLoadingAppResourcesAsync() {\n    if (!('startAsync' in this.props)) {\n      return;\n    }\n\n    if (!('onFinish' in this.props)) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    if (!('onError' in this.props)) {\n      throw new Error('AppLoading onError prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync();\n    } catch (e) {\n      if (!this._isMounted) {\n        return;\n      }\n      this.props.onError(e);\n    } finally {\n      if (!this._isMounted) {\n        return;\n      }\n      // If we get to this point then we know that either there was no error, or the error was handled.\n      this.props.onFinish();\n    }\n  }\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n\nlet lifecycleEmitter: EventEmitter | null = null;\n\nfunction emitEvent(event: string) {\n  if (lifecycleEmitter) {\n    lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter(): EventEmitter {\n  if (!lifecycleEmitter) {\n    lifecycleEmitter = new EventEmitter();\n  }\n  return lifecycleEmitter;\n}\n"]}